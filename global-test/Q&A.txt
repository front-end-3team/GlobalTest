1. FLUX 패턴에 대하여 설명해보세요.
    - 사용자 입력을 기반으로 action을 만들고 action을 dispatcher에 전달하여 
        store(model)의 데이터를 변경한 뒤 view 에 반영하는 단방향의 흐름으로 애플리케이션을 만드는 아키텍처


2. 아래의 hook 함수는 각각 어느 순간에 사용할까요?
    (1) useReducer
        - useState를 대체할 수 있는 함수, 좀 더 복잡한 상태 관리가 필요한 경우 사용
	    - 한 컴포넌트 내에서 state를 업데이트하는 로직 부분을 분리시키는 것을 가능하게 함으로 코드의 최적화
	    - 관리해야할 state가 1개 이상, state의 구조가 복잡해질 경우

    (2) useContext
        - 전역적으로 데이터를 공유해야 할 때 / 전역적으로 사용되는 데이터들을 공유해 최상단 컴포넌트에서 최하단 컴포넌트까지 데이터 전달 손쉽게 가능
	    - 하지만 context 사용시 컴포넌트 재사용 어려워질 수 있음


3. 전역 상태 관리를 해야하는 이유는 무엇일까요?
    - 부모-자식 관계로 이루어진 트리 구조에서 데이터 전달을 할 경우, 상-하로 접근해야하는데 다른 가지에서 멀리있는 데이터가 필요할 때 
        props 전달을 무수히 해야 하고 코드량이 방대해진다. 중앙에 state를 관리하는 store를 두어 계층에 관계없이 direct하게 접근하기 위해
    - props drilling issue 해결하기 위해


4. 그렇다면 전역 상태 관리는 위 조건에만 부합하면 반드시 수행하는 것이 좋을까요?
   전역 상태 관리를 통해 얻을 수 있는 장단점에 관하여 토의해보세요.
